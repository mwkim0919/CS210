package ca.ubc.cpsc210.waldo.map;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import org.osmdroid.DefaultResourceProxyImpl;
import org.osmdroid.ResourceProxy;
import org.osmdroid.api.IGeoPoint;
import org.osmdroid.tileprovider.tilesource.TileSourceFactory;
import org.osmdroid.util.GeoPoint;
import org.osmdroid.views.MapController;
import org.osmdroid.views.MapView;
import org.osmdroid.views.overlay.ItemizedIconOverlay;
import org.osmdroid.views.overlay.ItemizedIconOverlay.OnItemGestureListener;
import org.osmdroid.views.overlay.OverlayItem;
import org.osmdroid.views.overlay.OverlayManager;
import org.osmdroid.views.overlay.PathOverlay;
import org.osmdroid.views.overlay.SimpleLocationOverlay;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import ca.ubc.cpsc210.waldo.R;
import ca.ubc.cpsc210.waldo.model.Bus;
import ca.ubc.cpsc210.waldo.model.BusRoute;
import ca.ubc.cpsc210.waldo.model.BusStop;
import ca.ubc.cpsc210.waldo.model.Trip;
import ca.ubc.cpsc210.waldo.model.Waldo;
import ca.ubc.cpsc210.waldo.translink.TranslinkService;
import ca.ubc.cpsc210.waldo.util.BusStopComparator;
import ca.ubc.cpsc210.waldo.util.LatLon;
import ca.ubc.cpsc210.waldo.util.Segment;
import ca.ubc.cpsc210.waldo.waldowebservice.WaldoService;

/**
 * Fragment holding the map in the UI.
 * 
 * @author CPSC 210 Instructor
 */
public class MapDisplayFragment extends Fragment {

	/**
	 * Log tag for LogCat messages
	 */
	private final static String LOG_TAG = "MapDisplayFragment";

	/**
	 * Location of some points in lat/lon for testing and for centering the map
	 */
	private final static GeoPoint ICICS = new GeoPoint(49.261182, -123.2488201);
	private final static GeoPoint CENTERMAP = ICICS;

	/**
	 * Preference manager to access user preferences
	 */
	private SharedPreferences sharedPreferences;

	/**
	 * View that shows the map
	 */
	private MapView mapView;

	/**
	 * Map controller for zooming in/out, centering
	 */
	private MapController mapController;

	// **************** Overlay fields **********************

	/**
	 * Overlay for the device user's current location.
	 */
	private SimpleLocationOverlay userLocationOverlay;

	/**
	 * Overlay for bus stop to board at
	 */
	private ItemizedIconOverlay<OverlayItem> busStopToBoardOverlay;

	/**
	 * Overlay for bus stop to disembark
	 */
	private ItemizedIconOverlay<OverlayItem> busStopToDisembarkOverlay;

	/**
	 * Overlay for Waldo
	 */
	private ItemizedIconOverlay<OverlayItem> waldosOverlay;

	/**
	 * Overlay for displaying bus routes
	 */
	private List<PathOverlay> routeOverlays;

	/**
	 * Selected bus stop on map
	 */
	private OverlayItem selectedStopOnMap;

	/**
	 * Bus selected by user
	 */
	private OverlayItem selectedBus;

	// ******************* Application-specific *****************

	/**
	 * Wraps Translink web service
	 */
	private TranslinkService translinkService;

	/**
	 * Wraps Waldo web service
	 */
	private WaldoService waldoService;

	/**
	 * Waldo selected by user
	 */
	private Waldo selectedWaldo;

	/*
	 * The name the user goes by
	 */
	private String userName;
	
	// ******************* LocationManager & LocationListener *****************
	/**
	 * @author Minwoo
	 */
	LocationManager locationManager;
	
	LocationListener locationListener;

	// ***************** Android hooks *********************

	/**
	 * Help initialize the state of the fragment
	 */
	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		setHasOptionsMenu(true);

		sharedPreferences = PreferenceManager
				.getDefaultSharedPreferences(getActivity());

		initializeWaldo();

		waldoService = new WaldoService();
		translinkService = new TranslinkService();
		routeOverlays = new ArrayList<PathOverlay>();
		locationManager = (LocationManager)getActivity().getSystemService(Context.LOCATION_SERVICE);
		locationListener = new UserLocationFinder();
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 10, locationListener);
	}

	/**
	 * Initialize the Waldo web service
	 */
	private void initializeWaldo() {
		String s = null;
		new InitWaldo().execute(s);
	}

	/**
	 * Set up map view with overlays for buses, selected bus stop, bus route and
	 * current location.
	 */
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		if (mapView == null) {
			mapView = new MapView(getActivity(), null);

			mapView.setTileSource(TileSourceFactory.MAPNIK);
			mapView.setClickable(true);
			mapView.setBuiltInZoomControls(true);

			mapController = mapView.getController();
			mapController.setZoom(mapView.getMaxZoomLevel() - 4);
			mapController.setCenter(CENTERMAP);

			userLocationOverlay = createLocationOverlay();
			busStopToBoardOverlay = createBusStopToBoardOverlay();
			busStopToDisembarkOverlay = createBusStopToDisembarkOverlay();
			waldosOverlay = createWaldosOverlay();

			// Order matters: overlays added later are displayed on top of
			// overlays added earlier.
			mapView.getOverlays().add(waldosOverlay);
			mapView.getOverlays().add(busStopToBoardOverlay);
			mapView.getOverlays().add(busStopToDisembarkOverlay);
			mapView.getOverlays().add(userLocationOverlay);
		}

		return mapView;
	}

	/**
	 * Helper to reset overlays
	 */
	private void resetOverlays() {
		OverlayManager om = mapView.getOverlayManager();
		om.clear();
		om.addAll(routeOverlays);
		om.add(busStopToBoardOverlay);
		om.add(busStopToDisembarkOverlay);
		om.add(userLocationOverlay);
		om.add(waldosOverlay);
	}

	/**
	 * Helper to clear overlays
	 */
	private void clearOverlays() {
		waldosOverlay.removeAllItems();
		clearAllOverlaysButWaldo();
		OverlayManager om = mapView.getOverlayManager();
		om.add(waldosOverlay);
	}

	/**
	 * Helper to clear overlays, but leave Waldo overlay untouched
	 */
	private void clearAllOverlaysButWaldo() {
		if (routeOverlays != null) {
			routeOverlays.clear();
			busStopToBoardOverlay.removeAllItems();
			busStopToDisembarkOverlay.removeAllItems();

			OverlayManager om = mapView.getOverlayManager();
			om.clear();
			om.addAll(routeOverlays);
			om.add(busStopToBoardOverlay);
			om.add(busStopToDisembarkOverlay);
			om.add(userLocationOverlay);
		}
	}

	/**
	 * When view is destroyed, remove map view from its parent so that it can be
	 * added again when view is re-created.
	 */
	@Override
	public void onDestroyView() {
		((ViewGroup) mapView.getParent()).removeView(mapView);
		super.onDestroyView();
	}

	/**
	 * Shut down the various services
	 */
	@Override
	public void onDestroy() {
		super.onDestroy();
	}

	/**
	 * Update the overlay with user's current location. Request location
	 * updates.
	 */
	@Override
	public void onResume() {

		// CPSC 210 students, you'll need to handle parts of location updates
		// here...
		initializeWaldo();
//		updateLocation(locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER));
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 10, locationListener);
		super.onResume();
	}

	/**
	 * Cancel location updates.
	 */
	@Override
	public void onPause() {
		// CPSC 210 students, you'll need to do some work with location updates
		// here...
		super.onPause();
		locationManager.removeUpdates(locationListener);
	}

	/**
	 * @author Minwoo
	 * Update the marker for the user's location and repaint.
	 */
	public void updateLocation(Location location) {
		System.out.println(location);
		LatLon ll = new LatLon(location.getLatitude(), location.getLongitude());
		waldoService.setMyLocation(ll);
//		location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		GeoPoint gp = new GeoPoint(location.getLatitude(), location.getLongitude());
		userLocationOverlay.setLocation(gp);
		
		// CPSC 210 Students: Implement this method. mapView.invalidate is
		// needed to redraw
		// the map and should come at the end of the method.
		mapView.invalidate();
	}

	/**
	 * Save map's zoom level and centre.
	 */
	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);

		if (mapView != null) {
			outState.putInt("zoomLevel", mapView.getZoomLevel());
			IGeoPoint cntr = mapView.getMapCenter();
			outState.putInt("latE6", cntr.getLatitudeE6());
			outState.putInt("lonE6", cntr.getLongitudeE6());
		}
	}

	/**
	 * Retrieve Waldos from the Waldo web service
	 */
	public void findWaldos() {
		clearOverlays();
		// Find out from the settings how many waldos to retrieve, default is 1
		String numberOfWaldosAsString = sharedPreferences.getString(
				"numberOfWaldos", "1");
		int numberOfWaldos = Integer.valueOf(numberOfWaldosAsString);
		new GetWaldoLocations().execute(numberOfWaldos);
		mapView.invalidate();
	}

	/**
	 * Clear waldos from view
	 */
	public void clearWaldos() {
		clearOverlays();
		mapView.invalidate();

	}

	// ******************** Overlay Creation ********************

	/**
	 * Create the overlay for bus stop to board at marker.
	 */
	private ItemizedIconOverlay<OverlayItem> createBusStopToBoardOverlay() {
		ResourceProxy rp = new DefaultResourceProxyImpl(getActivity());

		OnItemGestureListener<OverlayItem> gestureListener = new OnItemGestureListener<OverlayItem>() {

			/**
			 * Display bus stop description in dialog box when user taps stop.
			 * 
			 * @param index
			 *            index of item tapped
			 * @param oi
			 *            the OverlayItem that was tapped
			 * @return true to indicate that tap event has been handled
			 */
			@Override
			public boolean onItemSingleTapUp(int index, OverlayItem oi) {

				new AlertDialog.Builder(getActivity())
						.setPositiveButton(R.string.ok, new OnClickListener() {
							@Override
							public void onClick(DialogInterface arg0, int arg1) {
								if (selectedStopOnMap != null) {
									selectedStopOnMap.setMarker(getResources()
											.getDrawable(R.drawable.pin_blue));

									mapView.invalidate();
								}
							}
						}).setTitle(oi.getTitle()).setMessage(oi.getSnippet())
						.show();

				oi.setMarker(getResources().getDrawable(R.drawable.pin_blue));
				selectedStopOnMap = oi;
				mapView.invalidate();
				return true;
			}

			@Override
			public boolean onItemLongPress(int index, OverlayItem oi) {
				// do nothing
				return false;
			}
		};

		return new ItemizedIconOverlay<OverlayItem>(
				new ArrayList<OverlayItem>(), getResources().getDrawable(
						R.drawable.pin_blue), gestureListener, rp);
	}

	/**
	 * Create the overlay for bus stop to disembark at marker.
	 */
	private ItemizedIconOverlay<OverlayItem> createBusStopToDisembarkOverlay() {
		ResourceProxy rp = new DefaultResourceProxyImpl(getActivity());

		OnItemGestureListener<OverlayItem> gestureListener = new OnItemGestureListener<OverlayItem>() {

			/**
			 * Display bus stop description in dialog box when user taps stop.
			 * 
			 * @param index
			 *            index of item tapped
			 * @param oi
			 *            the OverlayItem that was tapped
			 * @return true to indicate that tap event has been handled
			 */
			@Override
			public boolean onItemSingleTapUp(int index, OverlayItem oi) {

				new AlertDialog.Builder(getActivity())
						.setPositiveButton(R.string.ok, new OnClickListener() {
							@Override
							public void onClick(DialogInterface arg0, int arg1) {
								if (selectedStopOnMap != null) {
									selectedStopOnMap.setMarker(getResources()
											.getDrawable(R.drawable.pin_blue));

									mapView.invalidate();
								}
							}
						}).setTitle(oi.getTitle()).setMessage(oi.getSnippet())
						.show();

				oi.setMarker(getResources().getDrawable(R.drawable.pin_blue));
				selectedStopOnMap = oi;
				mapView.invalidate();
				return true;
			}

			@Override
			public boolean onItemLongPress(int index, OverlayItem oi) {
				// do nothing
				return false;
			}
		};

		return new ItemizedIconOverlay<OverlayItem>(
				new ArrayList<OverlayItem>(), getResources().getDrawable(
						R.drawable.pin_blue), gestureListener, rp);
	}

	/**
	 * Create the overlay for Waldo markers.
	 */
	private ItemizedIconOverlay<OverlayItem> createWaldosOverlay() {
		ResourceProxy rp = new DefaultResourceProxyImpl(getActivity());
		OnItemGestureListener<OverlayItem> gestureListener = new OnItemGestureListener<OverlayItem>() {

			/**
			 * Display Waldo point description in dialog box when user taps
			 * icon.
			 * 
			 * @param index
			 *            index of item tapped
			 * @param oi
			 *            the OverlayItem that was tapped
			 * @return true to indicate that tap event has been handled
			 */
			@Override
			public boolean onItemSingleTapUp(int index, OverlayItem oi) {

				selectedWaldo = waldoService.getWaldos().get(index);
				Date lastSeen = selectedWaldo.getLastUpdated();
				SimpleDateFormat dateTimeFormat = new SimpleDateFormat(
						"MMM dd, hh:mmaa", Locale.CANADA);

				new AlertDialog.Builder(getActivity())
						.setPositiveButton(R.string.get_route,
								new OnClickListener() {
									@Override
									public void onClick(DialogInterface arg0,
											int arg1) {

										// CPSC 210 STUDENTS. You must set
										// currCoord to
										// the user's current location.
										LatLon currCoord = null;

										// CPSC 210 Students: Set currCoord...

										LatLon destCoord = selectedWaldo
												.getLastLocation();

										new GetRouteTask().execute(currCoord,
												destCoord);

									}
								})
						.setNegativeButton(R.string.ok, null)
						.setTitle(selectedWaldo.getName())
						.setMessage(
								"Last seen  " + dateTimeFormat.format(lastSeen))
						.show();

				mapView.invalidate();
				return true;
			}

			@Override
			public boolean onItemLongPress(int index, OverlayItem oi) {
				// do nothing
				return false;
			}
		};

		return new ItemizedIconOverlay<OverlayItem>(
				new ArrayList<OverlayItem>(), getResources().getDrawable(
						R.drawable.map_pin_thumb_blue), gestureListener, rp);
	}

	/**
	 * Create overlay for a bus route.
	 */
	private PathOverlay createPathOverlay() {
		PathOverlay po = new PathOverlay(Color.parseColor("#cf0c7f"),
				getActivity());
		Paint pathPaint = new Paint();
		pathPaint.setColor(Color.parseColor("#cf0c7f"));
		pathPaint.setStrokeWidth(4.0f);
		pathPaint.setStyle(Style.STROKE);
		po.setPaint(pathPaint);
		return po;
	}

	/**
	 * Create the overlay for the user's current location.
	 */
	private SimpleLocationOverlay createLocationOverlay() {
		ResourceProxy rp = new DefaultResourceProxyImpl(getActivity());

		return new SimpleLocationOverlay(getActivity(), rp) {
			@Override
			public boolean onLongPress(MotionEvent e, MapView mapView) {
				new GetMessagesFromWaldo().execute();
				return true;
			}

		};
	}

	/**
	 * Plot endpoints
	 */
	private void plotEndPoints(Trip trip) {
		GeoPoint pointStart = new GeoPoint(trip.getStart().getLatLon()
				.getLatitude(), trip.getStart().getLatLon().getLongitude());

		OverlayItem overlayItemStart = new OverlayItem(Integer.valueOf(
				trip.getStart().getNumber()).toString(), trip.getStart()
				.getDescriptionToDisplay(), pointStart);
		GeoPoint pointEnd = new GeoPoint(trip.getEnd().getLatLon()
				.getLatitude(), trip.getEnd().getLatLon().getLongitude());
		OverlayItem overlayItemEnd = new OverlayItem(Integer.valueOf(
				trip.getEnd().getNumber()).toString(), trip.getEnd()
				.getDescriptionToDisplay(), pointEnd);
		busStopToBoardOverlay.removeAllItems();
		busStopToDisembarkOverlay.removeAllItems();

		busStopToBoardOverlay.addItem(overlayItemStart);
		busStopToDisembarkOverlay.addItem(overlayItemEnd);
	}

	/**
	 * Plot bus route onto route overlays
	 * 
	 * @param rte
	 *            : the bus route
	 * @param start
	 *            : location where the trip starts
	 * @param end
	 *            : location where the trip ends
	 */
	private void plotRoute(Trip trip) {

		// Put up the end points
		plotEndPoints(trip);

		// CPSC 210 STUDENTS: Complete the implementation of this method

		// This should be the last method call in this method to redraw the map
		mapView.invalidate();
	}

	/**
	 * @author Minwoo
	 * Plot a Waldo point on the specified overlay.
	 */
	private void plotWaldos(List<Waldo> waldos) {
		// CPSC 210 STUDENTS: Complete the implementation of this method
		waldosOverlay.removeAllItems();
		for (Waldo w : waldos) {
			GeoPoint gp = new GeoPoint(w.getLastLocation().getLatitude(), w.getLastLocation().getLongitude());
			OverlayItem waldo = new OverlayItem(w.getName(), w.toString(), gp);
			waldosOverlay.addItem(waldo);
//			mapView.getOverlays().add(waldosOverlay);
		}
		// This should be the last method call in this method to redraw the map
		mapView.invalidate();
	}

	/**
	 * Helper to create simple alert dialog to display message
	 * 
	 * @param msg
	 *            message to display in alert dialog
	 * @return the alert dialog
	 */
	private AlertDialog createSimpleDialog(String msg) {
		AlertDialog.Builder dialogBldr = new AlertDialog.Builder(getActivity());
		dialogBldr.setMessage(msg);
		dialogBldr.setNeutralButton(R.string.ok, null);
		return dialogBldr.create();
	}

	/**
	 * Asynchronous task to get a route between two endpoints. Displays progress
	 * dialog while running in background.
	 */
	private class GetRouteTask extends AsyncTask<LatLon, Void, Trip> {
		private ProgressDialog dialog = new ProgressDialog(getActivity());
		private LatLon startPoint;
		private LatLon endPoint;

		@Override
		protected void onPreExecute() {
			translinkService.clearModel();
			dialog.setMessage("Retrieving route...");
			dialog.show();
		}

		@Override
		protected Trip doInBackground(LatLon... routeEndPoints) {
			Trip myTrip;
			startPoint = waldoService.getMyLocation();
			endPoint = selectedWaldo.getLastLocation();
			// check user preferences
			int distance = Integer.parseInt(sharedPreferences.getString("stopDistance", "500"));
			String routingType = sharedPreferences.getString("routingOptions", "closest_stop_me");
			// 1. Find bus stops near me and the target
			Set<BusStop> stopsNearMe = translinkService.getBusStopsAround(startPoint, distance);
			List<BusStop> orderedBusStopsNearMe = orderBusStopsByDistanceFromEntity("closest_stop_me", stopsNearMe);
			Set<BusStop> stopsNearTarget = translinkService.getBusStopsAround(endPoint, distance);
			List<BusStop> orderedBusStopsNearDest = orderBusStopsByDistanceFromEntity("closest_stop_dest", stopsNearTarget);
			// 2. Check if any stops overlap. If so, we are within walking distance
			HashSet<BusStop> intersectStops = (HashSet) ((HashSet) stopsNearMe).clone();
			intersectStops.retainAll(stopsNearTarget);
			// 3. No overlap so find a trip
			if (intersectStops.size() > 0) {
				return new Trip(null, null, "", null, true);
			} else if (!stopsNearMe.isEmpty() && !stopsNearTarget.isEmpty()){
				if  (routingType == "closest_stop_me"){
					myTrip = findTrip("closest_stop_me", orderedBusStopsNearMe, orderedBusStopsNearDest, false);
				} else {
					myTrip = findTrip("closest_stop_dest", orderedBusStopsNearMe, orderedBusStopsNearDest, false);
				} 
//				translinkService.getBusEstimatesForStop(myTrip.getStart());
//				translinkService.parseKMZ(myTrip.getRoute()); // get segments of route and store in the BusRoute
				return myTrip;
			// 4.  else there is no stop at user or target destination
			} else {
				return null;
			}
		}

		private List<BusStop> orderBusStopsByDistanceFromEntity(String routingType, Set<BusStop> stopsNearEntity) {
			ArrayList<BusStop> stops = new ArrayList<BusStop>(stopsNearEntity);
			ArrayList<Double> distances = new ArrayList<Double>();
			LatLon latlon;
			if (routingType == "closest_stop_me"){
				latlon = waldoService.getMyLocation();
			} else {
				latlon = selectedWaldo.getLastLocation();
			} 
			Comparator<BusStop> comparator = new BusStopComparator(latlon);
			Collections.sort(stops, comparator);
			for (BusStop b: stops){
				System.out.println(b);
				double distance = LatLon.distanceBetweenTwoLatLon(latlon, b.getLatLon());
				System.out.println(distance);
				distances.add(distance);				
			}
			System.out.println("Distances=" + distances);
			return stops;
		}

		private Set<BusRoute> GetCommonRoutes (BusStop bs1, BusStop bs2) {
			Set<BusRoute> bs1Routes = bs1.getRoutes();
			Set<BusRoute> bs2Routes = bs2.getRoutes();
			Set<BusRoute> commonRoutes = new HashSet<BusRoute>();
			if (bs1Routes.size() > bs2Routes.size()) {
				for (BusRoute route : bs2Routes) {
					if (bs1Routes.contains(route)) {
						commonRoutes.add(route);
					}
				}
			} else if (bs1Routes.size() <= bs2Routes.size()){
				for (BusRoute route : bs1Routes) {
					if (bs2Routes.contains(route)) {
						commonRoutes.add(route);
					}
				}
			}
			
			return commonRoutes;
		}
		
//		private Trip findTrip(String routingType, List<BusStop> stopsNearMe, 
//				List<BusStop> stopsNearDest, boolean walkingDistance) {
//			List<BusStop> stopsToPriortizeClose;
//			List<BusStop> stopsToNotPrioritizeClose;
//			if  (routingType == "closest_stop_me"){
//				stopsToPriortizeClose = stopsNearMe;
//				stopsToNotPrioritizeClose = stopsNearDest;
//			} else {
//				stopsToPriortizeClose = stopsNearDest;
//				stopsToNotPrioritizeClose = stopsNearMe;
//			} 
//			
//			Set<BusRoute> routes;
//			String direction;
//				for (BusStop stop1: stopsToPriortizeClose){
//					for (BusStop stop2: stopsToNotPrioritizeClose){
//						routes = this.GetCommonRoutes(stop1, stop2);
//						System.out.println("Routes found=" + routes);
//						if (routes.size()>0){
//							// TODO choose route by direction, for now use default direction EAST
//							Iterator<BusRoute> routeIterator = routes.iterator();
//							System.out.println("Chosen start stop =" + stop1);
//							System.out.println("Chosen dest stop =" + stop2);
//							BusRoute chosenRoute = routeIterator.next();
//							translinkService.getBusEstimatesForStop(stop1);
//							System.out.println("ROUTEMAPLOCATION=" + chosenRoute.getRouteMapLocation());
//							if (!(chosenRoute.getRouteMapLocation() == null)){
//							translinkService.parseKMZ(chosenRoute);
//							direction = findDirection(possibleDirections(stop1.getLatLon(), stop2.getLatLon()), stop1, chosenRoute);
//							System.out.println("POSSIBLE DIRECTIONS ARE..." + possibleDirections(stop2.getLatLon(), stop1.getLatLon()));
//							System.out.println("FINAL DIRECTION IS..." + direction);
//							return new Trip(stop1, stop2, direction, chosenRoute, walkingDistance);
//						}
//						}
//					}
//				}
//			System.out.println("No bus routes found");
//			return null;
//		}
		private Trip findTrip(String routingType, List<BusStop> stopsNearMe, 
				List<BusStop> stopsNearDest, boolean walkingDistance) {
			Set<BusRoute> routes;
			String direction;
			if (routingType == "closest_stop_me"){
				for (BusStop stop1: stopsNearMe){
					for (BusStop stop2: stopsNearDest){
						routes = this.GetCommonRoutes(stop1, stop2);
						System.out.println("Routes found=" + routes);
						if (routes.size()>0){
							// TODO choose route by direction, for now use default direction EAST
							Iterator<BusRoute> routeIterator = routes.iterator();
							System.out.println("Chosen start stop =" + stop1);
							System.out.println("Chosen dest stop =" + stop2);
							BusRoute chosenRoute = routeIterator.next();
							translinkService.getBusEstimatesForStop(stop1);
							System.out.println("ROUTEMAPLOCATION=" + chosenRoute.getRouteMapLocation());
							if (!(chosenRoute.getRouteMapLocation() == null)){
							translinkService.parseKMZ(chosenRoute);
							direction = findDirection(possibleDirections(stop1.getLatLon(), stop2.getLatLon()), stop1, chosenRoute);
							System.out.println("POSSIBLE DIRECTIONS ARE..." + possibleDirections(stop2.getLatLon(), stop1.getLatLon()));
							System.out.println("FINAL DIRECTION IS..." + direction);
							return new Trip(stop1, stop2, direction, chosenRoute, walkingDistance);
						}
						}
					}
				}
			} else {
				for (BusStop stop1: stopsNearDest){
					for (BusStop stop2: stopsNearMe){
						routes = this.GetCommonRoutes(stop1, stop2);
						System.out.println("Routes found=" + routes);
						if (routes.size()>0){
							// TODO choose route by direction, for now use default direction EAST
							Iterator<BusRoute> routeIterator = routes.iterator();
							System.out.println("Chosen start stop =" + stop2);
							System.out.println("Chosen dest stop =" + stop1);
							BusRoute chosenRoute = routeIterator.next();
							translinkService.getBusEstimatesForStop(stop2);
							System.out.println("ROUTEMAPLOCATION=" + chosenRoute.getRouteMapLocation());
							if (!(chosenRoute.getRouteMapLocation() == null)){
							translinkService.parseKMZ(chosenRoute);
							direction = findDirection(possibleDirections(stop2.getLatLon(), stop1.getLatLon()), stop2, chosenRoute);
							System.out.println("POSSIBLE DIRECTIONS ARE..." + possibleDirections(stop2.getLatLon(), stop1.getLatLon()));
							System.out.println("FINAL DIRECTION IS..." + direction);
							return new Trip(stop2, stop1, direction, chosenRoute, walkingDistance);
							}
						}
					}
				}
			}
			System.out.println("No bus routes found");
			return null;
		}

		private List<String> possibleDirections(LatLon start, LatLon dest) {
			List<String> possibleDirections = new ArrayList<String>();
			if (start.getLatitude() > dest.getLatitude()) {
				possibleDirections.add("SOUTH");
			} else if (start.getLatitude() < dest.getLatitude()) {
				possibleDirections.add("NORTH");
			}
			if (start.getLongitude() > dest.getLongitude()) {
				possibleDirections.add("WEST");
			} else if (start.getLongitude() < dest.getLongitude()) {
				possibleDirections.add("EAST");
			}
			return possibleDirections;
		}
		
		private String findDirection(List<String> possibleDirections, BusStop stop, BusRoute route) {
			String direction = "";
			if (stop.getRoutes().contains(route)) {
				Set<Bus> buses = route.getBuses();
				System.out.println("BUSES ARE...." + buses);
				for (Bus bus : buses) {
					System.out.println("BUS STOP IS...." + bus.getStop());
					System.out.println("BUS DIRECTION IS...." + bus.getDirection());
					if (possibleDirections.contains(bus.getDirection()))
						if (bus.getRoute() == route)
							direction = bus.getDirection();
				}
			}
			return direction;
		}
		
		@Override
		protected void onPostExecute(Trip trip) {
			dialog.dismiss();

			if (trip != null && !trip.inWalkingDistance()) {
				// Remove previous start/end stops
				busStopToBoardOverlay.removeAllItems();
				busStopToDisembarkOverlay.removeAllItems();

				// Removes all but the selected Waldo
				waldosOverlay.removeAllItems();
				List<Waldo> waldos = new ArrayList<Waldo>();
				waldos.add(selectedWaldo);
				plotWaldos(waldos);

				// Plot the route
				plotRoute(trip);

				// Move map to the starting location
				LatLon startPointLatLon = trip.getStart().getLatLon();
				mapController.setCenter(new GeoPoint(startPointLatLon
						.getLatitude(), startPointLatLon.getLongitude()));
				mapView.invalidate();
			} else if (trip != null && trip.inWalkingDistance()) {
				AlertDialog dialog = createSimpleDialog("You are in walking distance!");
				dialog.show();
			} else {
				AlertDialog dialog = createSimpleDialog("Unable to retrieve bus location info...");
				dialog.show();
			}
		}
	}

	/**
	 * Asynchronous task to initialize or re-initialize access to the Waldo web
	 * service.
	 */
	private class InitWaldo extends AsyncTask<String, Void, Void> {

		@Override
		protected Void doInBackground(String... arg0) {

			// Initialize the service passing the name of the Waldo to use. If
			// you have
			// passed an argument to this task, then it will be used as the
			// name, otherwise
			// nameToUse will be null
			String nameToUse = arg0[0];
			userName = waldoService.initSession(nameToUse);

			return null;
		}

	}

	/**
	 * Asynchronous task to get Waldo points from Waldo web service. Displays
	 * progress dialog while running in background.
	 */
	private class GetWaldoLocations extends
			AsyncTask<Integer, Void, List<Waldo>> {
		private ProgressDialog dialog = new ProgressDialog(getActivity());

		@Override
		protected void onPreExecute() {
			dialog.setMessage("Retrieving locations of waldos...");
			dialog.show();
		}

		@Override
		protected List<Waldo> doInBackground(Integer... i) {
			Integer numberOfWaldos = i[0];
			return waldoService.getRandomWaldos(numberOfWaldos);
		}

		@Override
		protected void onPostExecute(List<Waldo> waldos) {
			dialog.dismiss();
			if (waldos != null) {
				plotWaldos(waldos);
			}
		}
	}

	/**
	 * Asynchronous task to get messages from Waldo web service. Displays
	 * progress dialog while running in background.
	 */
	private class GetMessagesFromWaldo extends
			AsyncTask<Void, Void, List<String>> {

		private ProgressDialog dialog = new ProgressDialog(getActivity());

		@Override
		protected void onPreExecute() {
			dialog.setMessage("Retrieving messages...");
			dialog.show();
		}

		@Override
		protected List<String> doInBackground(Void... params) {
			return waldoService.getMessages();
		}

		@Override
		protected void onPostExecute(List<String> messages) {
			dialog.dismiss();
			AlertDialog dialog = createSimpleDialog(messages.toString());
			dialog.show();
		}

	}

	/**
	 * @author Minwoo
	 * private class for task 5
	 */
	private class UserLocationFinder implements LocationListener {
		
		@Override
		public void onLocationChanged(Location location) {
			updateLocation(location);
		}

		@Override
		public void onProviderDisabled(String arg0) {
			
		}

		@Override
		public void onProviderEnabled(String arg0) {
			
		}

		@Override
		public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
			
		}
	}
}
